# CC1200 Driver Port Plan: MBED-OS to STM32 HAL

## Overview
This plan outlines the steps required to port the CC1200 radio driver from MBED-OS to STM32 HAL for the STM32F411CEU microcontroller. The port will maintain all functionality while replacing MBED-OS dependencies with STM32 HAL equivalents.

## Target Hardware
- MCU: STM32F411CEU
- SPI Interface: SPI1
- GPIO Pins: To be configured based on hardware setup

## Migration Steps

### 1. Project Structure Changes
- Create new HAL-based header and implementation files
- Update CMakeLists.txt to use STM32 HAL instead of MBED-OS
- Add STM32CubeMX configuration file if needed

### 2. Core Driver Changes

#### 2.1 SPI Interface
- Replace MBED-OS SPI implementation with STM32 HAL SPI functions
  - Replace `spi(mosiPin, misoPin, sclkPin, csPin, use_gpio_ssel)` with HAL SPI initialization
  - Replace `spi.format()` and `spi.frequency()` with HAL SPI configuration
  - Replace `spi.select()`, `spi.deselect()`, and `spi.write()` with HAL equivalents
  - Implement CS pin control manually using HAL GPIO functions

#### 2.2 GPIO Handling
- Replace MBED-OS `DigitalOut` with STM32 HAL GPIO functions
  - Replace `rst(rstPin, 1)` with HAL GPIO initialization and output setting
  - Update all GPIO operations to use HAL functions

#### 2.3 Timing Functions
- Replace MBED-OS timing functions with STM32 HAL equivalents
  - Replace `wait_us()` with `HAL_Delay()` or custom microsecond delay
  - Replace `Timer` class with HAL timer functionality
  - Update time duration types (e.g., `10ms`) with HAL compatible values

#### 2.4 Debug Output
- Maintain debug output functionality using HAL UART or custom print functions
  - Update debug print macros to work with STM32 HAL

### 3. Class Structure Updates

#### 3.1 Constructor Changes
- Update constructor to accept HAL handles instead of MBED pin names
  - Replace `PinName` parameters with pin configuration structures or handles
  - Initialize HAL peripherals in constructor or separate init function

#### 3.2 Register Access Functions
- Maintain register access functions but update SPI communication
  - Update `readRegister()`, `writeRegister()`, etc. to use HAL SPI functions
  - Preserve register addressing and command structure

#### 3.3 Packet Handling
- Maintain packet handling logic while updating hardware access
  - Update FIFO access functions to use HAL SPI

### 4. Testing and Validation

#### 4.1 Basic Functionality Tests
- Test SPI communication
- Test register read/write operations
- Test chip reset and initialization

#### 4.2 Radio Functionality Tests
- Test packet transmission
- Test packet reception
- Test radio configuration functions

#### 4.3 Performance Validation
- Validate timing requirements are met
- Ensure data rates match original implementation

### 5. Documentation Updates
- Update API documentation to reflect HAL-based implementation
- Document pin configuration requirements
- Update usage examples

## Implementation Details

### HAL SPI Configuration for CC1200
```c
// SPI handle for CC1200
SPI_HandleTypeDef hspi1;

// SPI initialization
void CC1200_SPI_Init(void) {
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; // Adjust for 5MHz
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  
  HAL_SPI_Init(&hspi1);
}
```

### GPIO Configuration for CS and RST pins
```c
// GPIO pins for CC1200
GPIO_TypeDef* CC1200_CS_GPIO_Port;
uint16_t CC1200_CS_Pin;
GPIO_TypeDef* CC1200_RST_GPIO_Port;
uint16_t CC1200_RST_Pin;

// GPIO initialization
void CC1200_GPIO_Init(GPIO_TypeDef* cs_port, uint16_t cs_pin, 
                      GPIO_TypeDef* rst_port, uint16_t rst_pin) {
  CC1200_CS_GPIO_Port = cs_port;
  CC1200_CS_Pin = cs_pin;
  CC1200_RST_GPIO_Port = rst_port;
  CC1200_RST_Pin = rst_pin;
  
  // Set RST pin high initially
  HAL_GPIO_WritePin(CC1200_RST_GPIO_Port, CC1200_RST_Pin, GPIO_PIN_SET);
}
```

### SPI Transfer Functions
```c
// SPI select/deselect functions
void CC1200_Select(void) {
  HAL_GPIO_WritePin(CC1200_CS_GPIO_Port, CC1200_CS_Pin, GPIO_PIN_RESET);
}

void CC1200_Deselect(void) {
  HAL_GPIO_WritePin(CC1200_CS_GPIO_Port, CC1200_CS_Pin, GPIO_PIN_SET);
}

// SPI write/read functions
uint8_t CC1200_SPI_Transfer(uint8_t data) {
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}
```

## Timeline
1. Initial setup and HAL configuration: 1 day
2. SPI and GPIO port implementation: 2 days
3. Core driver functionality port: 3 days
4. Testing and debugging: 2 days
5. Documentation and finalization: 1 day

Total estimated time: 9 days
